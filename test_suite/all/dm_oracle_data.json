{
  "entityType": "datamodel",
  "dependsOn": [
    "domain_create.json",
    "src_oracle_data.json"
  ],
  "config": {
    "name": "Datamodel_oracle",
    "domain": "TestDomain",
    "sources": [
      "oracle_data"
    ],
    "transformations": {
      "oracle_data": {
        "TEST_NUMERIC_DATATYPES": [
          "derive col_abs using abs(COL_NUMBER);",
          "derive col_add_res using COL_NUMBER+COL_NUMERIC;",
          "derive col_sub_res using COL_NUMBER-COL_DECIMAL;",
          "derive col_and_res using COL_NUMBER&&COL_NUMERIC;",
          "derive col_or_res using COL_NUMBER||COL_DECIMAL; ",
          "derive col_not_res using !COL_NUMBER;",
          "derive col_pow using pow(COL_NUMBER,2);",
          "derive col_exp using exp(COL_DECIMAL);",
          "derive col_log using log(COL_DECIMAL);",
          "derive col_ceil using ceil(COL_FLOAT); ",
          "derive col_floor using floor(COL_FLOAT);",
          "derive col_sqrt using sqrt(COL_NUMBER); ",
          "replace $2 using ($2 > 3) ? 1 : 0;",
          "replace $2 using ($1 < 3) ? 1 : 0;",
          "replace $3 using ($1 <= 3) ? 1 : 0;",
          "replace $3 using ($4 >= 3) ? 1 : 0;",
          "replace $3 using ($4 == 3) ? 1 : 0;",
          "replace $3 using ($1 != 3) ? 1 : 0;",
          "derive col_mul_res using COL_DECIMAL*COL_FLOAT;"
        ],
        "TEST_DATETIME_DATATYPES": [
          "derive A_date using date(DATE_COL); ",
          "derive A_time using time(TS_COL);",
          "derive A_diff using datediff(DATE_COL,ZIW_START_DATE);",
          "derive A_month using month(DATE_COL);",
          "derive A_monthname using monthname(DATE_COL);",
          "derive A_year using year(DATE_COL);",
          "derive A_day using day(DATE_COL);",
          "derive A_dayotheweek using dayofweek(DATE_COL); ",
          "derive A_weekno using dayofweek(DATE_COL);",
          "derive A_formatdate using formatdate(DATE_COL,\"yyyy-MMM-dd\"); "
        ],
        "TEST_CHAR_DATATYPES": [
          "split COL_CHAR using splitter(\"a\",10);",
          "split COL_NCHAR using splitter(\"[s]+\",3);",
          "split COL_NCHAR2 using splitter(\"[abc]\",3);",
          "replace COL_VARCHAR using contains($2,\"\")?$2:\"null_value\";",
          "replace COL_LONG using contains($2,\"dt_char\")?$2:\"null_value\";",
          "derive col_lower using lower(COL_CHAR); ",
          "derive col_upper using upper(COL_NCHAR); ",
          "derive col_trim using trim(COL_NCHAR2);",
          "derive col_left using left(COL_LONG,2);",
          "derive col_right using right(COL_VARCHAR,3);",
          "derive charcol using contains(COL_VARCHAR,\"abc|bcd\")?\"aaa\":\"char\";",
          "derive col_sub using substr(COL_CHAR,3,2);"
        ]
      }
    },
    "hdfs_path": "/Datamodel_oracle",
    "hive_schema": "Datamodel_oracle",
    "treemap": {
      "nodeindex": 1,
      "children": [
        {
          "nodeindex": 4,
          "breadCrumb": "ROOT_TABLE",
          "join": {
            "op": "AND",
            "predicates": [
              {
                "p_col": "COL_PK",
                "c_col": "INT_COL",
                "op": "equals"
              }
            ]
          },
          "discovered_cardinality": {
            "parent": "one",
            "self_optional": false,
            "parent_optional": true,
            "self": "one"
          },
          "source": "oracle_data",
          "table": "TEST_NUMERIC_DATATYPES"
        },
        {
          "nodeindex": 5,
          "breadCrumb": "ROOT_TABLE",
          "join": {
            "op": "AND",
            "predicates": [
              {
                "p_col": "COL_PK",
                "c_col": "INT_COL",
                "op": "equals"
              }
            ]
          },
          "discovered_cardinality": {
            "parent": "one",
            "self_optional": false,
            "parent_optional": true,
            "self": "one"
          },
          "source": "oracle_data",
          "table": "TEST_DATETIME_DATATYPES"
        },
        {
          "nodeindex": 6,
          "breadCrumb": "ROOT_TABLE",
          "join": {
            "op": "AND",
            "predicates": [
              {
                "p_col": "COL_PK",
                "c_col": "INT_COL",
                "op": "equals"
              }
            ]
          },
          "discovered_cardinality": {
            "parent": "one",
            "self_optional": true,
            "parent_optional": true,
            "self": "one"
          },
          "source": "oracle_data",
          "table": "TEST_CHAR_DATATYPES"
        }
      ],
      "treemapId": {
        "_str": "565bf53ab800680afb1ff323"
      },
      "source": "oracle_data",
      "table": "ROOT_TABLE"
    },
    "cubes": []
  }
}
