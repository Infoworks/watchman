{
  "entityType": "datamodel",
    "dependsOn": [
    "domain_create.json",
    "src_teradata_data.json"
    ],
  "config": {
    "name": "datamodel_teradata_data",
    "domain": "TestDomain",
    "sources": [
      "teradata_data"
    ],
    "transformations": {
      "teradata_data": {
        "test_datatype_numeric": [
	"derive col_add_res using col_num+col_num;"
		"derive col_sub_res using  col_num-col_num;"
		"derive col_mul_res using  col_num*col_num;"
		"derive col_div_res using col_num/col_num;"
		"derive col_and_res using byteint_col&&byteint_col;"
		"derive col_or_res using byteint_col||byteint_col;"
		"derive col_not_res using !byteint_col;"
		"derive col_abd_res using abs(byteint_col);"
		"derive up using byteint_col * 1000;"
		"derive col_log using log(col_num);"
		"derive col_sqrt using sqrt(col_num);"
		"derive col_pow using pow(col_num, value);"
		"derive col_exp using exp(col_num);"
		"derive col_ceil using ceil(col_num);"
		"derive col_in using in(col_num);"
		"derive col_floor using floor(col_num);"
		"derive col_mod using %col_num;"
		"derive col_grt_res using (col_num > 10) ? 1 : 0 ;"
		"derive col_grteql_res using (col_num >= 10) ? 1 : 0 ;"
		"derive col_ler_res using (col_num < 10) ? 1 : 0 ;"
		"derive col_lereql_res using (col_num <= 10) ? 1 : 0 ;"
		"derive col_eql_res using ( col_num== 10) ? 1 : 0 ;"
		"derive col_noteql_res using (col_num != 10) ? 1 : 0 ;"
        ],
        "test_datatype_datetime": [
		"derive A_date using date(date_col,\"yyyy-MMM-dd\");",
		"derive A_interval using addinterval(timestamp, 2015, 12, 21, 21, 21, 21);",
		"derive A_Subinterval using subinterval(timestamp, 2015, 12, 21, 21, 21, 21);",
		"derive A_diff using datediff(date_col, ZIW_START_DATE);",
		"derive A_formatdate using formatdate(date_col,\"yyyy-MMM-dd\");",
		"derive TODAY using today();",
		"derive A_daysbwt using daysbetween(date_col, ZIW_START_DATE);",
		"derive SINCE as dayssince(date_col);",
		"derive MBETWEEN as monthsbetween(date_col, ZIW_START_DATE);",
		"derive MSINCE as monthssince(date_col);",
		"derive YBETWEEN as monthsbetween(date_col, ZIW_START_DATE);",
		"derive YSINCE as monthssince(date_col);",
		"derive A_month using month(date_col);",
		"derive A_monthname using monthname(date_col);",
		"derive A_year using year(date_col);",
		"derive A_day using day(date_col);",
		"derive A_quartar using quarter(date_col);",
		"derive A_dayofweek using dayofweek(date_col);",
		"derive A_weekno using weeknumber(date_col);"
        ],
        "test_datatype_string": [
          "split charcol using splitter(\"a\",10);  ",
          "split char_varyingcol using splitter(\"[s]+\",3);  ",
          "split varcharcol using splitter(\"[abc]\",3);  ",
          "derive col_lower using lower(varcharcol);  ",
          "derive col_upper using upper(charcol);  ",
          "derive col_trim using trim(varcharcol);  ",
          "derive col_left using left(varcharcol,3);  "
        ]
      }
    },
    "hdfs_path": "/datamodels/iw/datamodel_teradata_data",
    "hive_schema": "datamodel_teradata_data",
    "treemap": {
      "nodeindex": 17,
      "children": [
        {
          "nodeindex": 18,
          "breadCrumb": "root_table",
          "join": {
            "op": "AND",
            "predicates": [
              {
                "p_col": "col_pk",
                "c_col": "col_num",
                "op": "equals"
              }
            ]
          },
          "children": [
            {
              "nodeindex": 21,
              "breadCrumb": "root_table > test_datatype_numeric",
              "join": {
                "op": "AND",
                "predicates": [
                  {
                    "p_col": "col_num",
                    "c_col": "col_row",
                    "op": "equals"
                  }
                ]
              },
              "discovered_cardinality": {
                "parent": "one",
                "parent_optional": false,
                "self": "one",
                "self_optional": true
              },
              "source": "teradata_data",
              "table": "test_datatype_numdec"
            }
          ],
          "discovered_cardinality": {
            "parent": "one",
            "parent_optional": true,
            "self": "one",
            "self_optional": false
          },
          "source": "teradata_data",
          "table": "test_datatype_numeric"
        },
        {
          "nodeindex": 19,
          "breadCrumb": "root_table",
          "join": {
            "op": "AND",
            "predicates": [
              {
                "p_col": "col_pk",
                "c_col": "col_num1",
                "op": "equals"
              }
            ]
          },
          "children": [
            {
              "nodeindex": 22,
              "breadCrumb": "root_table > test_datatype_datetime",
              "join": {
                "op": "AND",
                "predicates": [
                  {
                    "p_col": "col_num1",
                    "c_col": "integer_col",
                    "op": "equals"
                  }
                ]
              },
              "discovered_cardinality": {
                "parent": "one",
                "parent_optional": true,
                "self": "one",
                "self_optional": true
              },
              "source": "teradata_data",
              "table": "test_datatype_interval"
            },
            {
              "nodeindex": 23,
              "breadCrumb": "root_table > test_datatype_datetime",
              "join": {
                "op": "AND",
                "predicates": [
                  {
                    "p_col": "col_num1",
                    "c_col": "integer_col",
                    "op": "equals"
                  }
                ]
              },
              "discovered_cardinality": {
                "parent": "one",
                "parent_optional": true,
                "self": "one",
                "self_optional": true
              },
              "source": "teradata_data",
              "table": "test_datatype_period"
            }
          ],
          "discovered_cardinality": {
            "parent": "one",
            "parent_optional": true,
            "self": "one",
            "self_optional": false
          },
          "source": "teradata_data",
          "table": "test_datatype_datetime"
        },
        {
          "nodeindex": 20,
          "breadCrumb": "root_table",
          "join": {
            "op": "AND",
            "predicates": [
              {
                "p_col": "col_pk",
                "c_col": "column_num",
                "op": "equals"
              }
            ]
          },
          "children": [
            {
              "nodeindex": 24,
              "breadCrumb": "root_table > test_datatype_string",
              "join": {
                "op": "AND",
                "predicates": [
                  {
                    "p_col": "column_num",
                    "c_col": "integer_col",
                    "op": "equals"
                  }
                ]
              },
              "discovered_cardinality": {
                "parent": "one",
                "parent_optional": false,
                "self": "one",
                "self_optional": true
              },
              "source": "teradata_data",
              "table": "test_datatype_char"
            }
          ],
          "discovered_cardinality": {
            "parent": "one",
            "parent_optional": true,
            "self": "one",
            "self_optional": false
          },
          "source": "teradata_data",
          "table": "test_datatype_string"
        }
      ],
      "treemapId": {
        "_str": "565e9e25b3503e07c27763da"
      },
      "source": "teradata_data",
      "table": "root_table"
    },
    "cubes": []
  }
}
